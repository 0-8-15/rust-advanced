import { LineEdit, ScrollView} from "std-widgets.slint";
import { TextEdit, Button, StandardButton, ComboBox, GroupBox, VerticalBox, HorizontalBox, StandardTableView } from "std-widgets.slint";
import { CheckBox } from "std-widgets.slint";

export struct StandardTableResult {
    columns: [TableColumn],
    rows: [[StandardListViewItem]],
}

/*

pub fn query_as_array_of_array_of<T>(conn: &Connection, query: &str)
                                     -> Result<Vec<Vec<T>>>
    where T: FromSql + for<'a> std::convert::From<&'a str>
{
    let mut stmt = conn.prepare(query).unwrap();
    let mut result = vec![];
    let mut row: Vec<T> = vec![];
    for col in stmt.column_names() {
        row.push(col.into())
    }
    result.push(row);
    let colco = stmt.column_count();
    let mut rows = stmt.query([])?;
    while let Some(row) = rows.next()? {
	let mut v: Vec<T> = Vec::new();
        for col in 0..colco {
            let e: T = row.get(col)?;
            v.push(e.into());
        }
	result.push(v)
    }
    Ok(result)
}


    {
        use crate::db;
        use slint::ModelRc;
        let shop = open_db().expect("TODO: move to main HANDLEERROR could not create model file");
        let all = query_as_array_of_array_of::<String>(&shop, "select name, ''||num as num from pet").unwrap();
        let all: Vec<ModelRc<_>> = all.into_iter().map(|e| ModelRc::new(VecModel::from(e.into_iter().map(|x: std::string::String| x.into()).collect::<Vec<_>>()))).collect();
        let stuff = ModelRc::new(VecModel::from(all));
        main_window.set_test_data(stuff);
        drop(shop);
    }

*/

export component Matrix inherits Rectangle {
    in property <bool> edit-on-top: true;
    in-out property <[TableColumn]> columns;
    in-out property <[[StandardListViewItem]]> cells;
    in property <int> skip; // assuming first column(s) are keys - do not show them

    in-out property <[StandardListViewItem]> current-line;
    private property <bool> form-visible: edit-on-top;
    private property <length> cell-height: 32px;
    private property <length> cell-width: 100px;
    private property <{r: int, c: int}> active-cell: { r: -1, c: -1 };

    pure callback empty-line(int) -> [StandardListViewItem];

    callback reset();
    callback reset-active();
    callback insert([StandardListViewItem]) -> bool;
    reset() => {
        set-active(-1,-1);
        current-line=[];
    }
    reset-active() => {
        reset();
        form-visible = true;
    }
    function set-active(r: int, c: int) {
        active-cell = {r: r, c: c};
        current-line = root.cells[root.active-cell.r];
        form-visible = edit-on-top;
    }

    function accept-current-line() {
        if(active-cell.r >= 0) {
            cells[active-cell.r] = current-line;
            set-active(-1, -1);
        } else {
            if( insert(current-line) ) {
                set-active(-1, -1);
            }
        }
    }

    TouchArea {
        x: 0;
        y: 0;
        width: 20px;
        height: root.cell-height;
        clicked => {
            reset-active();
            root.current-line=root.empty-line(columns.length);
        }
    }

    Flickable {
        y: root.cell-height * (form-visible ? 2 : 1);
        viewport-y <=> vertical-scroll.viewport-y;
        viewport-height: (cells.length + 2) * root.cell-height;
        for row[row-idx] in root.cells : Rectangle {
                y: row-idx * root.cell-height;
                height: root.cell-height;

                Text { x:0;y:0; text: row_idx; }
        }
    }

    ScrollView {
        x: 20px;
        width: root.width - 20px;
        height: 100%;
        viewport-width: cells[0].length * root.cell-width;
        //viewport-height: (cells.length + 1) * root.cell-height;

        for heading[idx] in columns : Rectangle {
            y:0;
            x: (idx - skip) * root.cell-width;
            height: root.cell-height;
            width: root.cell-width;
            visible: idx >= skip;
            TouchArea {
                Text { x:0;y:0; text: heading.title; }
                clicked => {
                    reset()
                }
            }
        }

        for cell[idx] in current-line : Rectangle {
            y: root.cell-height;
            x: (idx - skip) * root.cell-width;
            height: root.cell-height;
            width: root.cell-width;
            visible: form-visible && idx >= skip;
            LineEdit {
                x:0; y:0; width: 100%; height: 100%;
                text: cell.text;
                edited => { cell.text = self.text; }
                accepted => { accept-current-line() }
            }
        }

        vertical-scroll := ScrollView {
            y: root.cell-height * (form-visible ? 2 : 1);
            viewport-width: cells[0].length * root.cell-width;
            viewport-height: (cells.length + 2) * root.cell-height;

            for row[row-idx] in root.cells : Rectangle {
                y: row-idx * root.cell-height;
                height: root.cell-height;

                for cell[col-idx] in row: Rectangle {
                    property <bool> is-active: !form-visible && root.active-cell.r == row-idx && root.active-cell.c == col-idx;

                    visible: col-idx >= skip;
                    y:0;
                    height: root.cell-height;
                    width: root.cell-width;
                    border-color: gray;
                    border-width: 1px;
                    x: (col-idx - skip) * root.cell-width;

                    Text {
                        visible: !is-active && cell.text != "";
                        text: " " + cell.text;
                        vertical-alignment: center;
                        width: 100%;
                        height: 100%;
                    }

                    TouchArea {
                        clicked => {
                            l.text = cell.text;
                            set-active(row-idx, col-idx);
                            l.focus();
                        }
                    }

                    l := LineEdit {
                        edited => {
                            cell.text = self.text
                        }
                        accepted => { accept-current-line() }

                        visible: is-active;
                        width: 100%;
                        height: 100%;
                    }
                }
            }
        }
    }
}

export component SQLBrowser inherits VerticalLayout {
    in-out property <bool> use-standard;
    in property <bool> enable-control: false;

    in-out property <string> query-text;
    in-out property <string> update-text;
    in-out property <string> insert-text;

    callback query(string, string) -> StandardTableResult;
    callback execute(string, [StandardListViewItem]) -> bool;
    callback result([TableColumn], [[StandardListViewItem]]);

    property <[TableColumn]> columns;
    property <[[StandardListViewItem]]> rows;
    pure callback empty-line(int) -> [StandardListViewItem];

    private property <bool> control-visible: false;


    private property <StandardTableResult> got;
    function query-again() {
        got = root.query(query-text, update-text);
        columns = got.columns;
        rows = got.rows;
        matrix.reset();
    }
    init => { query-again() }

    result(h, c) => {
        columns = h;
        rows = c;
    }

    property <[StandardListViewItem]> current-line;

    if enable-control : CheckBox{
        vertical-stretch: 0;
        horizontal-stretch: 0;
        text: "edit";
        checked <=> control-visible;
    }
    if control-visible : GroupBox {
        title: "SQL command";
        vertical-stretch: 0;
        HorizontalLayout {
        vertical-stretch: 1;
            command := TextEdit {
                vertical-stretch: 1;
                min-height: 10rem;
                preferred-height: 100%;
                text: "";
            }
            StandardButton {
                vertical-stretch: 0;
                kind: apply;
                clicked => { root.execute(command.text, use-current-line-as-parameters.checked ? current-line : [] ) }
            }
            use-current-line-as-parameters := CheckBox{
                text: "to current";
                checked: false;
                enabled: !use-standard;
            }
        }
    }
    if control-visible : Rectangle {
        border-width: 1px;
        border-color: gray;
        vertical-stretch: 0;
        HorizontalBox {
            VerticalLayout {
                horizontal-stretch: 1;
                GroupBox {
                    title: "SQL query";
                    query := TextEdit {
                        min-height: 4rem;
                        text <=> query-text;
                    }
                }
                GroupBox {
                    title: "SQL row update";
                    update := TextEdit {
                        min-height: 4rem;
                        text <=> update-text;
                    }
                }
                GroupBox {
                    title: "SQL insert";
                    create := TextEdit {
                        min-height: 4rem;
                        text <=> insert-text;
                    }
                }
            }
            VerticalBox {
                horizontal-stretch: 0;
                StandardButton {
                    vertical-stretch: 0;
                    kind: ok;
                    clicked() => { root.query-again() }
                }
                HorizontalLayout{
                    GroupBox {
                        title: "skip";
                        vertical-stretch: 0;
                        LineEdit {
                            width: 3rem;
                            text: matrix.skip;
                            enabled: !use-standard;
                            accepted => { matrix.skip=self.text.to-float() }
                        }
                    }
                    CheckBox{
                        text: "top mode";
                        enabled: !use-standard;
                        checked <=> matrix.edit-on-top;
                    }
                }
                selected-mode := ComboBox {
                    vertical-stretch: 0;
                    model: ["standard", "matrix"];
                    current-index: root.use-standard ? 0 : 1;
                    selected(v) => { use-standard = self.current-index == 1 ? false : true }
                }
                Rectangle {}
                Button {
                    vertical-stretch: 0;
                    horizontal-stretch: 0;
                    text: "New";
                    enabled: !use-standard;
                    clicked => {
                        matrix.reset-active();
                        matrix.current-line=root.empty-line(columns.length);
                    }
                }
            }
        }
    }
    if use-standard : StandardTableView {
        width: 100%; height: 100%;
        columns: columns;
        rows: rows;
    }
    matrix := Matrix {
        vertical-stretch: 0.8;
        visible: !use-standard;
        edit-on-top: false;
        columns: columns; cells <=> rows;
        current-line <=> current-line;
        empty-line(n) => { empty-line(n) }
        insert(line) => {
            execute(insert-text, line)
        }
    }
}

/*
component Cell inherits MainWindow {
    // initialize the cells with demy value to be viewed in the preview
    in-out property <[string]> _row: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""];
    cells: [
        root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row,
        root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row,
        root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row,
        root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row,
        root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row, root._row,
    ];
}
// */

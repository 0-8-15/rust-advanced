// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: MIT

import { LineEdit, Button, Slider, StandardListView, GridBox, HorizontalBox } from "std-widgets.slint";
import { GroupBox, VerticalBox, StandardButton } from "std-widgets.slint";

import { SQLBrowser } from "./sql.slint";

export struct PetUi {
    id: string,
    name: string,
}

export component MainWindow inherits Window {
    in property <[StandardListViewItem]> names-list;
    out property <int> current-item: list.current-item;
    property <PetUi> current-pet;
    callback set-current-pet(PetUi);
    set-current-pet(pet) => {
        current-pet = pet;
        edit-name.text = pet.name;
    }
    callback clear-current-pet();
    clear-current-pet() => {
        set-current-pet({});
        list.set-current-item(-1);
    }
    out property <string> prefix;
    callback currentItemChanged <=> list.current-item-changed;
    callback prefixEdited(string);
    callback createClicked(PetUi) -> bool;
    callback updateClicked(PetUi);
    callback deleteClicked(PetUi) -> bool;

    in-out property <string> last-error;

    GridBox {
        Text {
            text: "Filter prefix:";
            vertical-alignment: center;
            horizontal-alignment: right;
        }

        LineEdit {
            text <=> root.prefix;
            edited => { root.prefixEdited(self.text) }
        }

        list := StandardListView {
            row: 1;
            rowspan: 3;
            colspan: 2;
            model: root.names-list;
        }

        Text {
            col: 2;
            row: 1;
            text: "Name: ";
            vertical-alignment: center;
            horizontal-alignment: right;
        }

        edit-name := LineEdit { text: root.current-pet.name; edited => { root.current-pet.name = self.text } }

        HorizontalBox {
            padding-left: 0;
            padding-bottom: 0;
            row: 4;
            alignment: start;

            create-button := Button {
                clicked => {
                    if( root.current-pet.id == "" ) {
                        if( root.createClicked(current-pet) ) { clear-current-pet() }
                    } else { clear-current-pet() }
                }

                text: "Create";
            }
            states [
                editing when root.current-pet.id != "" : {
                    create-button.text: "Clear";
                }
                creating when root.current-pet.id == "" : {
                    create-button.text: "Create";
                }
            ]
            Button {
                clicked => { root.updateClicked(current-pet) }

                text: "Update";
                enabled: root.current-pet.id != "" && list.current-item != -1 && list.current-item < root.names-list.length;

            }
            Button {
                clicked => { if( root.deleteClicked(current-pet) ) { clear-current-pet() } }

                text: "Delete";
                enabled: root.current-pet.id != "" && list.current-item != -1 && list.current-item < root.names-list.length;
            }
        }

        sql-browser := SQLBrowser { col: 0; colspan: 4; row: 5; rowspan: 5; min-height: 30rem; use-standard: false; empty-line(n) => { root.empty-line(n) } }

    }

    callback test-query <=> sql-browser.query;
    callback test-result <=> sql-browser.result;
    callback test-execute <=> sql-browser.execute;
    callback empty-line(int) -> [StandardListViewItem];

    if last-error != "" : err := Rectangle {
        opacity: 1;
        background: root.background;
        border-color: red;
        border-width: 2px;
        border-radius: 6px;
        height: msg.min-height;
        width: msg.min-width * 1.1;
        msg := GroupBox {
            title: "Error";
            VerticalBox {
                width: 100%;
                Text {
                    text: last-error;
                    width: (root.width - clear.preferred-width) *0.8;
		    horizontal-alignment: left;
                    wrap: word-wrap;
                }
                clear := StandardButton { kind: close; clicked => { last-error = ""; } }
            }
        }
    }
}
